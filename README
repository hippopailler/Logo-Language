# Projet Logo - Interpréteur en OCaml

Ce projet est un interpréteur du langage Logo implémenté en OCaml. Il permet de dessiner des formes géométriques en contrôlant une "tortue" virtuelle à l'écran.

## Fonctionnalités

### Commandes de base
- Déplacement (forward, right, left)
- Gestion du stylo (penup, pendown)
- Épaisseur du trait (pensize)
- Effacement (clear)

### Gestion des états
- Sauvegarde de position (save)
- Restauration de position (restore)

### Couleurs et styles
- Sélection de couleur (setcolor)
- Palette de 8 couleurs (0-7)
- Épaisseur du trait variable

### Formes prédéfinies
- Carré (square)
- Cercle (circle)
- Triangle (triangle)

### Programmation
- Variables et opérations
- Fonctions définissables
- Boucles (repeat)
- Conditions (if)
- Nombres aléatoires (random)
- Récursivité possible

## Prérequis

- OCaml (version recommandée : 4.13.0 ou supérieure)
- Module Graphics
- OCamlfind

## Installation

1. Installez OCaml et OPAM :
```bash
sudo apt-get update
sudo apt-get install ocaml opam
```

2. Initialisez OPAM :
```bash
opam init
eval $(opam env)
```

3. Installez les dépendances :
```bash
opam install graphics
opam install ocamlfind
```

## Compilation

```bash
make clean
make
```
./logo tests/fichier.logo

## Syntaxe du langage

### Nouvelles commandes
- `save` : Sauvegarde la position actuelle
- `restore` : Retourne à la dernière position sauvegardée
- `random(N)` : Génère un nombre aléatoire entre 0 et N-1
- `triangle N` : Dessine un triangle équilatéral de côté N

### Définition de fonctions
```logo
def nom_fonction(param) {
    commandes
}
```

### Structures conditionnelles
```logo
if condition [
    commandes
]
```

## Exemples

### Fleur colorée
```logo
def fleur(taille) {
    set c random(6)
    setcolor c
    save
    repeat 8 [
        forward taille
        circle taille/2
        restore
        right 45
        save
    ]
    restore
    setcolor 3
    right 90
    forward taille*2
}

repeat 10 [
    fleur(50)
    penup
    forward 100
    pendown
]
```

### Spirale avec sauvegarde d'état
```logo
def spirale(taille) {
    if taille > 5 [
        save
        forward taille
        right 60
        spirale(taille - 5)
        restore
    ]
}
```

## Structure du projet

- `ast.ml` : Définition des types du langage
- `parser.mly` : Grammaire du langage
- `lexer.mll` : Analyse lexicale
- `exec.ml` : Exécution des commandes
- `main.ml` : Point d'entrée et gestion des erreurs


## Structures des tests : 
Dans le dossier test, une série de fichiers .logo sont disponibles pour illustrer les possibilités de notre langage : 
- pour les exécuter : ./logo tests/fichier.logo

- fonction.logo : illustre la création de fonctions et des boucles (conditionelles ou non)
- glou.logo : illustre la définition des variables et les opérations méthématiques associées.
- jardin.logo : sert à illustrer l'utilisation des fonctions et des fonctions save (position) et restore, ainsi que l'aléatoire random

## Auteur

Hippolyte PAILLER